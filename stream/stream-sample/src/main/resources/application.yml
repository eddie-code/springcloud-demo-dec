spring:
  application:
    name: stream-sample
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
server:
  port: 63000

management:
  endpoint:
    env:
      enabled: false
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'

---
# rabbitmq 连接字符串
# http://192.168.8.240:15672/
spring:
  rabbitmq:
    host: 192.168.8.240
    port: 5672
    username: guest
    password: guest

---
# 绑定 Channel 到 broadcast
spring:
  cloud:
    stream:
      bindings:
        myTopic-consumer:  # 消费者绑定
          destination: broadcast
        myTopic-producer:  # 生产者绑定
          destination: broadcast

---
# 消息分组示例
spring:
  cloud:
    stream:
      bindings:
        group-consumer:  # 消费者绑定
          destination: group-topic
          group: Group-A
        group-producer:  # 生产者绑定
          destination: group-topic

---
# 消费分区配置
spring:
  cloud:
    stream:
      bindings:
        group-consumer: # com.example.springcloud.topic.GroupTopic
          consumer:
            partitioned: true # 打开消费者的消费分区功能
        group-producer:
          producer:
            partition-count: 2 # 两个消息分区
            # SpEL (Key resolver) 可以定义复杂表达式生成Key
            # 我们这里用最简化的配置，只有索引参数为 1 的节点（消费者），才能消费消息 ***
            partition-key-expression: "1"
      instanceCount: 2 # 当前消费者实例总数
      instanceIndex: 1 # 最大值 instanceCount-1，当前实例的索引号 ***

---
# 延迟消息配置
spring:
  cloud:
    stream:
      bindings:
        delayed-consumer:
          destination: delayed-topic
        delayed-producer:
          destination: delayed-topic
      rabbit:
        bindings:
          delayed-producer:
            producer:
              delayed-exchange: true # 延迟队列

---
# 异常消息（单机版重试）
spring:
  cloud:
    stream:
      bindings:
        error-consumer: # com.example.springcloud.topic.ErrorTopic
          destination: error-out-topic
          # 重试次数（本机重试）
          # 次数=1 相当于不重试 (不生效), 至少等于=2 才生效
          consumer:
            max-attempts: 2
        error-producer:
          destination: error-out-topic

---
# 异常消息（re-queue重试）
spring:
  cloud:
    stream:
      bindings:
        requeue-consumer:
          destination: requeue-topic
          group: requeue-group
          consumer:
            max-attempts: 1 # 强制 retry 次数指定=1 不让你在原地 retry 把失败消息退回到 rabbit 里在消费
        requeue-producer:
          destination: requeue-topic
      rabbit:
        bindings:
          requeue-consumer:
            consumer:
              requeueRejected: true # 仅对当前requeue-consumer，开启requeue

---
# 默认全局开启requeue
#spring:
#  rabbitmq:
#    listener:
#      default-requeue-rejected: true

---
# 死信队列配置
spring:
  cloud:
    stream:
      bindings:
        dlq-consumer:
          destination: dlq-topic
          consumer:
            max-attempts: 2
          group: dlq-group
        dlq-producer:
          destination: dlq-topic
      rabbit:
        bindings:
          dlq-consumer:
            consumer:
              auto-bind-dlq: true # 开启死信队列（默认 topic.dlq）

